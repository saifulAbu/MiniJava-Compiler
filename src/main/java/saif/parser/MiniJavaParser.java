/* Generated By:JavaCC: Do not edit this line. MiniJavaParser.java */
  package saif.parser;


  import saif.compiler.syntaxtree.*;
  public class MiniJavaParser implements MiniJavaParserConstants {

// The following is a simple grammar that will allow you
// to test the generated lexer.
/*
void Goal() :
{}
{
  ( MiniJavaToken() )*
  <EOF>
}

void MiniJavaToken():
{}
{
  "{" | "public" | "static" | "void" |
  "main" | "(" | "String"  | "[" | "]" | ")" | "}" | "extends" | ";"
  | "return" | "," | "int" | "boolean" | "=" | "if" | "else" | "while"
  | "System.out.println" | "&&" | "<" | "+" | "-" | "*" | "." |
  "length" | <INTEGER_LITERAL> | "true" | "false" | "this" | "new" |
  "!"
}
*/
//adding parser
  static final public Program Program() throws ParseException {
        MainClass mainClass;
        ClassDeclList classDeclList = new ClassDeclList();
        ClassDecl classDecl;
    mainClass = MainClass();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      classDecl = ClassDecl();
                                                      classDeclList.addElement(classDecl);
    }
    jj_consume_token(0);
                {if (true) return new Program(mainClass, classDeclList);}
    throw new Error("Missing return statement in function");
  }

//rule for main class
  static final public MainClass MainClass() throws ParseException {
        Identifier className;
        Identifier args;
        Statement statement;
    jj_consume_token(CLASS);
    className = Identifier();
    jj_consume_token(LBRACE);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(LPAREN);
    jj_consume_token(STRING);
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
    args = Identifier();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    statement = Statement();
    jj_consume_token(RBRACE);
    jj_consume_token(RBRACE);
        {if (true) return new MainClass(className, args, statement);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl ClassDecl() throws ParseException {
 ClassDecl classDecl;
    if (jj_2_1(3)) {
      classDecl = ClassDeclSimple();
                                                     {if (true) return classDecl;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        classDecl = ClassExtendsDeclaration();
                                                 {if (true) return classDecl;}
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

//rule for class other than main
  static final public ClassDeclSimple ClassDeclSimple() throws ParseException {
        Identifier className;
        VarDeclList varDeclList = new VarDeclList();
        VarDecl varDecl;
        MethodDeclList methodList = new MethodDeclList();
        MethodDecl methodDecl;
    jj_consume_token(CLASS);
    className = Identifier();
    jj_consume_token(LBRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOLEAN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      varDecl = VarDecl();
                              varDeclList.addElement(varDecl);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      methodDecl = MethodDecl();
                                            methodList.addElement(methodDecl);
    }
    jj_consume_token(RBRACE);
        {if (true) return new ClassDeclSimple(className, varDeclList, methodList);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassExtendsDeclaration ClassExtendsDeclaration() throws ParseException {
        Identifier className;
        Identifier baseClass;
        VarDeclList varDeclList = new VarDeclList();
        VarDecl varDecl;
        MethodDeclList methodList = new MethodDeclList();
        MethodDecl methodDecl;
    jj_consume_token(CLASS);
    className = Identifier();
    jj_consume_token(EXTENDS);
    baseClass = Identifier();
    jj_consume_token(LBRACE);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOLEAN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      varDecl = VarDecl();
                                      varDeclList.addElement(varDecl);
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      methodDecl = MethodDecl();
                                            methodList.addElement(methodDecl);
    }
    jj_consume_token(RBRACE);
                {if (true) return new ClassExtendsDeclaration(className, baseClass, varDeclList, methodList);}
    throw new Error("Missing return statement in function");
  }

  static final public VarDecl VarDecl() throws ParseException {
 Type t; Identifier id;
    t = Type();
    id = Identifier();
    jj_consume_token(SEMICOLON);
        {if (true) return new VarDecl(t, id);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDecl MethodDecl() throws ParseException {
 Type returnType;
 Identifier methodName;
 FormalList parameterList = null;
 VarDeclList variableList = new VarDeclList();
 StatementList statementList = new StatementList();
 Exp returnExpr;
 Statement stmt;
 VarDecl varDecl;
    jj_consume_token(PUBLIC);
    returnType = Type();
    methodName = Identifier();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case IDENTIFIER:
      parameterList = FormalList();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_6:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_6;
      }
      varDecl = VarDecl();
                                           variableList.addElement(varDecl);
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case LBRACE:
      case PRINTLN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_7;
      }
      stmt = Statement();
                             statementList.addElement(stmt);
    }
    jj_consume_token(RETURN);
    returnExpr = Exp();
    jj_consume_token(SEMICOLON);
    jj_consume_token(RBRACE);
        {if (true) return new MethodDecl(returnType, methodName, parameterList, variableList,
                        statementList, returnExpr);}
    throw new Error("Missing return statement in function");
  }

  static final public FormalList FormalList() throws ParseException {
 FormalList list = new FormalList(); FormalParameter fp;
    fp = FormalParameter();
                                list.addElement(fp);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_8;
      }
      fp = FormalRest();
                            list.addElement(fp);
    }
                {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  static final public FormalParameter FormalParameter() throws ParseException {
 Type type; Token t;
    type = Type();
    t = jj_consume_token(IDENTIFIER);
                {if (true) return new FormalParameter(type, new Identifier(t.image));}
    throw new Error("Missing return statement in function");
  }

  static final public FormalParameter FormalRest() throws ParseException {
 FormalParameter formal;
    jj_consume_token(COMMA);
    formal = FormalParameter();
        {if (true) return formal;}
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
 Type t;
    if (jj_2_3(2)) {
      t = IntArrayType();
                                     {if (true) return t;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        t = BooleanType();
                         {if (true) return t;}
        break;
      case INT:
        t = IntegerType();
                         {if (true) return t;}
        break;
      case IDENTIFIER:
        t = IdentifierType();
                            {if (true) return t;}
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public IdentifierType IdentifierType() throws ParseException {
 Token t;
    t = jj_consume_token(IDENTIFIER);
                {if (true) return new IdentifierType(t.image);}
    throw new Error("Missing return statement in function");
  }

  static final public IntArrayType IntArrayType() throws ParseException {
    jj_consume_token(INT);
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
                {if (true) return new IntArrayType();}
    throw new Error("Missing return statement in function");
  }

  static final public BooleanType BooleanType() throws ParseException {
    jj_consume_token(BOOLEAN);
                {if (true) return new BooleanType();}
    throw new Error("Missing return statement in function");
  }

  static final public IntegerType IntegerType() throws ParseException {
    jj_consume_token(INT);
                {if (true) return new IntegerType();}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
 Statement stmt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      stmt = Block();
                    {if (true) return stmt;}
      break;
    default:
      jj_la1[10] = jj_gen;
      if (jj_2_4(2)) {
        stmt = AssignmentStatement();
                                                 {if (true) return stmt;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          stmt = ArrayAssignmentStatement();
                                         {if (true) return stmt;}
          break;
        case IF:
          stmt = IfStatement();
                            {if (true) return stmt;}
          break;
        case WHILE:
          stmt = WhileStatement();
                               {if (true) return stmt;}
          break;
        case PRINTLN:
          stmt = PrintStatement();
                               {if (true) return stmt;}
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Block Block() throws ParseException {
 StatementList stmtList = new StatementList(); Statement stmt;
    jj_consume_token(LBRACE);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case LBRACE:
      case PRINTLN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_9;
      }
      stmt = Statement();
                                      stmtList.addElement(stmt);
    }
    jj_consume_token(RBRACE);
                {if (true) return new Block(stmtList);}
    throw new Error("Missing return statement in function");
  }

  static final public AssignmentStatement AssignmentStatement() throws ParseException {
 Token t; Exp exp;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(EQUAL);
    exp = Exp();
    jj_consume_token(SEMICOLON);
        {if (true) return new AssignmentStatement(new Identifier(t.image), exp);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayAssignmentStatement ArrayAssignmentStatement() throws ParseException {
 Token t; Exp exp1, exp2;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACKET);
    exp1 = Exp();
    jj_consume_token(RBRACKET);
    jj_consume_token(EQUAL);
    exp2 = Exp();
    jj_consume_token(SEMICOLON);
                {if (true) return new ArrayAssignmentStatement(new Identifier(t.image), exp1, exp2);}
    throw new Error("Missing return statement in function");
  }

  static final public IfStatement IfStatement() throws ParseException {
 Exp exp; Statement stmt1, stmt2;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    exp = Exp();
    jj_consume_token(RPAREN);
    stmt1 = Statement();
    jj_consume_token(ELSE);
    stmt2 = Statement();
                {if (true) return new IfStatement(exp, stmt1, stmt2);}
    throw new Error("Missing return statement in function");
  }

  static final public WhileStatement WhileStatement() throws ParseException {
 Exp exp; Statement stmt;
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    exp = Exp();
    jj_consume_token(RPAREN);
    stmt = Statement();
                        {if (true) return new WhileStatement(exp, stmt);}
    throw new Error("Missing return statement in function");
  }

  static final public PrintStatement PrintStatement() throws ParseException {
 Exp exp;
    jj_consume_token(PRINTLN);
    jj_consume_token(LPAREN);
    exp = Exp();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
                {if (true) return new PrintStatement(exp);}
    throw new Error("Missing return statement in function");
  }

//Expression list
  static final public ExpList ExpList() throws ParseException {
 ExpList expList = new ExpList(); Exp exp;
    exp = Exp();
                expList.addElement(exp);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_10;
      }
      exp = ExpRest();
                                                            expList.addElement(exp);
    }
    {if (true) return expList;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExpRest() throws ParseException {
 Exp ex;
    jj_consume_token(COMMA);
    ex = Exp();
                        {if (true) return ex;}
    throw new Error("Missing return statement in function");
  }

//Expression
//rewriting Exp part to correct the problem
  static final public Exp Exp() throws ParseException {
 Exp exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      exp = IntegerLiteral();
      if (jj_2_5(2)) {
        exp = ExpPrime(exp);
      } else {
        ;
      }
                                                                    {if (true) return exp;}
      break;
    case LPAREN:
      exp = BracketExpression();
      if (jj_2_6(2)) {
        exp = ExpPrime(exp);
      } else {
        ;
      }
                                                                         {if (true) return exp;}
      break;
    case NOT:
      exp = NotExpression();
      if (jj_2_7(2)) {
        exp = ExpPrime(exp);
      } else {
        ;
      }
                                                                     {if (true) return exp;}
      break;
    default:
      jj_la1[14] = jj_gen;
      if (jj_2_14(2)) {
        exp = NewObject();
        if (jj_2_8(2)) {
          exp = ExpPrime(exp);
        } else {
          ;
        }
                                                                              {if (true) return exp;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          exp = NewArray();
          if (jj_2_9(2)) {
            exp = ExpPrime(exp);
          } else {
            ;
          }
                                                                {if (true) return exp;}
          break;
        case THIS:
          exp = ThisExpression();
          if (jj_2_10(2)) {
            exp = ExpPrime(exp);
          } else {
            ;
          }
                                                                      {if (true) return exp;}
          break;
        case IDENTIFIER:
          exp = IdentifierExpression();
          if (jj_2_11(2)) {
            exp = ExpPrime(exp);
          } else {
            ;
          }
                                                                            {if (true) return exp;}
          break;
        case FALSE:
          exp = FalseLiteral();
          if (jj_2_12(2)) {
            exp = ExpPrime(exp);
          } else {
            ;
          }
                                                                    {if (true) return exp;}
          break;
        case TRUE:
          exp = TrueLiteral();
          if (jj_2_13(2)) {
            exp = ExpPrime(exp);
          } else {
            ;
          }
                                                                   {if (true) return exp;}
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExpPrime(Exp exp1) throws ParseException {
        Exp exp2, exp3;
        Identifier id;
        ExpList expList = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      exp2 = Exp();
                             exp1 = new PlusExpression(exp1, exp2);
      if (jj_2_15(2)) {
        exp1 = ExpPrime(exp1);
      } else {
        ;
      }
                                               {if (true) return exp1;}
      break;
    default:
      jj_la1[17] = jj_gen;
      if (jj_2_19(2)) {
        jj_consume_token(DOT);
        id = Identifier();
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case TRUE:
        case THIS:
        case NEW:
        case LPAREN:
        case NOT:
        case IDENTIFIER:
        case INTEGER_LITERAL:
          expList = ExpList();
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
          exp1 = new Call(exp1, id, expList);
        if (jj_2_16(2)) {
          exp1 = ExpPrime(exp1);
        } else {
          ;
        }
                                                {if (true) return exp1;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          jj_consume_token(LENGTH);
                         exp1 = new ArrayLength(exp1);
          if (jj_2_17(2)) {
            exp1 = ExpPrime(exp1);
          } else {
            ;
          }
                                               {if (true) return exp1;}
          break;
        case LBRACKET:
          jj_consume_token(LBRACKET);
          exp2 = Exp();
          jj_consume_token(RBRACKET);
                                             exp1 = new ArrayLookup(exp1, exp2);
          if (jj_2_18(2)) {
            exp1 = ExpPrime(exp1);
          } else {
            ;
          }
                                            {if (true) return exp1;}
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp Exp123() throws ParseException {
 Exp exp;
    if (jj_2_20(3)) {
      exp = PrimaryExpression();
                                                {if (true) return exp;}
    } else if (jj_2_21(3)) {
      exp = AndExpression();
                                              {if (true) return exp;}
    } else if (jj_2_22(3)) {
      exp = LessThanExpression();
                                                   {if (true) return exp;}
    } else if (jj_2_23(3)) {
      exp = PlusExpression();
                                               {if (true) return exp;}
    } else if (jj_2_24(3)) {
      exp = MinusExpression();
                                                {if (true) return exp;}
    } else if (jj_2_25(3)) {
      exp = TimesExpression();
                                                {if (true) return exp;}
    } else if (jj_2_26(3)) {
      exp = ArrayLookup();
                                            {if (true) return exp;}
    } else if (jj_2_27(3)) {
      exp = ArrayLength();
                                            {if (true) return exp;}
    } else if (jj_2_28(3)) {
      exp = Call();
                                     {if (true) return exp;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public AndExpression AndExpression() throws ParseException {
 Exp exp1, exp2;
    exp1 = PrimaryExpression();
    jj_consume_token(AND);
    exp2 = PrimaryExpression();
                {if (true) return new AndExpression(exp1, exp2);}
    throw new Error("Missing return statement in function");
  }

  static final public LessThanExpression LessThanExpression() throws ParseException {
 Exp exp1, exp2;
    exp1 = PrimaryExpression();
    jj_consume_token(LESS);
    exp2 = PrimaryExpression();
                {if (true) return new LessThanExpression(exp1, exp2);}
    throw new Error("Missing return statement in function");
  }

  static final public PlusExpression PlusExpression() throws ParseException {
 Exp exp1, exp2;
    exp1 = PrimaryExpression();
    jj_consume_token(PLUS);
    exp2 = PrimaryExpression();
                {if (true) return new PlusExpression(exp1, exp2);}
    throw new Error("Missing return statement in function");
  }

  static final public MinusExpression MinusExpression() throws ParseException {
 Exp exp1, exp2;
    exp1 = PrimaryExpression();
    jj_consume_token(MINUS);
    exp2 = PrimaryExpression();
                {if (true) return new MinusExpression(exp1, exp2);}
    throw new Error("Missing return statement in function");
  }

  static final public TimesExpression TimesExpression() throws ParseException {
 Exp exp1, exp2;
    exp1 = PrimaryExpression();
    jj_consume_token(TIMES);
    exp2 = PrimaryExpression();
                {if (true) return new TimesExpression(exp1, exp2);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayLookup ArrayLookup() throws ParseException {
 Exp idExp, indexExp;
    idExp = PrimaryExpression();
    jj_consume_token(LBRACKET);
    indexExp = Exp();
    jj_consume_token(RBRACKET);
        {if (true) return new ArrayLookup(idExp, indexExp);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayLength ArrayLength() throws ParseException {
 Exp ex;
    ex = PrimaryExpression();
    jj_consume_token(DOT);
    jj_consume_token(LENGTH);
                {if (true) return new ArrayLength(ex);}
    throw new Error("Missing return statement in function");
  }

  static final public Call Call() throws ParseException {
 Exp ex; Identifier id; ExpList expList = null;
    ex = PrimaryExpression();
    jj_consume_token(DOT);
    id = Identifier();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case THIS:
    case NEW:
    case LPAREN:
    case NOT:
    case IDENTIFIER:
    case INTEGER_LITERAL:
      expList = ExpList();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
        {if (true) return new Call(ex, id, expList);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp PrimaryExpression() throws ParseException {
 Exp exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      exp = IntegerLiteral();
                                {if (true) return exp;}
      break;
    case TRUE:
      exp = TrueLiteral();
                           {if (true) return exp;}
      break;
    case FALSE:
      exp = FalseLiteral();
                            {if (true) return exp;}
      break;
    case IDENTIFIER:
      exp = IdentifierExpression();
                                    {if (true) return exp;}
      break;
    case THIS:
      exp = ThisExpression();
                              {if (true) return exp;}
      break;
    default:
      jj_la1[20] = jj_gen;
      if (jj_2_29(2)) {
        exp = NewArray();
                                     {if (true) return exp;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          exp = NewObject();
                         {if (true) return exp;}
          break;
        case NOT:
          exp = NotExpression();
                             {if (true) return exp;}
          break;
        case LPAREN:
          exp = BracketExpression();
                                 {if (true) return exp;}
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public NotExpression NotExpression() throws ParseException {
 Exp exp;
    jj_consume_token(NOT);
    exp = Exp();
         {if (true) return new NotExpression(exp);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp BracketExpression() throws ParseException {
 Exp ex;
    jj_consume_token(LPAREN);
    ex = Exp();
    jj_consume_token(RPAREN);
         {if (true) return ex;}
    throw new Error("Missing return statement in function");
  }

  static final public NewArray NewArray() throws ParseException {
 Exp exp;
    jj_consume_token(NEW);
    jj_consume_token(INT);
    jj_consume_token(LBRACKET);
    exp = Exp();
    jj_consume_token(RBRACKET);
                {if (true) return new NewArray(exp);}
    throw new Error("Missing return statement in function");
  }

  static final public IntegerLiteral IntegerLiteral() throws ParseException {
 Token t;
    t = jj_consume_token(INTEGER_LITERAL);
                {if (true) return new IntegerLiteral(Integer.parseInt(t.image));}
    throw new Error("Missing return statement in function");
  }

  static final public TrueLiteral TrueLiteral() throws ParseException {
    jj_consume_token(TRUE);
                {if (true) return new TrueLiteral();}
    throw new Error("Missing return statement in function");
  }

  static final public FalseLiteral FalseLiteral() throws ParseException {
    jj_consume_token(FALSE);
                {if (true) return new FalseLiteral();}
    throw new Error("Missing return statement in function");
  }

  static final public IdentifierExpression IdentifierExpression() throws ParseException {
 Token t;
    t = jj_consume_token(IDENTIFIER);
                {if (true) return new IdentifierExpression(t.image);}
    throw new Error("Missing return statement in function");
  }

  static final public ThisExpression ThisExpression() throws ParseException {
    jj_consume_token(THIS);
                {if (true) return new ThisExpression();}
    throw new Error("Missing return statement in function");
  }

  static final public NewObject NewObject() throws ParseException {
 NewObject obj; Identifier id;
    jj_consume_token(NEW);
    id = Identifier();
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
         {if (true) return new NewObject(id);}
    throw new Error("Missing return statement in function");
  }

  static final public Identifier Identifier() throws ParseException {
 Token t;
    t = jj_consume_token(IDENTIFIER);
                {if (true) return new Identifier(t.image);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_3R_57() {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_47()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_28()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_40()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(TIMES)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(LESS)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniJavaParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000,0x4000,0xa,0x2000,0xa,0x2000,0xa,0x20201080,0x4000000,0xa,0x200000,0x20001080,0x20201080,0x4000000,0x80000,0xc30,0x80c30,0x0,0x10800000,0x80c30,0x430,0x80800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x40,0x0,0x40,0x0,0x40,0x40,0x0,0x40,0x0,0x40,0x40,0x0,0x88,0x40,0xc8,0x1,0x0,0xc8,0xc0,0x8,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[29];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJavaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJavaParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJavaParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJavaParser(MiniJavaParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 29; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                               }

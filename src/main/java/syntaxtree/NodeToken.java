/* Generated by JTB 1.4.4 */
package syntaxtree;

import visitor.IRetArguVisitor;
import visitor.IRetVisitor;
import visitor.IVoidArguVisitor;
import visitor.IVoidVisitor;

import java.util.*;
public class NodeToken implements INode {

  public String tokenImage;

  public ArrayList<NodeToken> specialTokens;

  public int beginLine;

  public int beginColumn;

  public int endLine;

  public int endColumn;

  public int kind;

  private static final long serialVersionUID = 144L;

  public static final String LS = System.getProperty("line.separator");

  public NodeToken(String s) {
    this(s, -1, -1, -1, -1, -1);
  }

  public NodeToken(String s, final int kn, final int bl, final int bc, final int el, final int ec) {
    tokenImage = s;
    specialTokens = null;
    kind = kn;
    beginLine = bl;
    beginColumn = bc;
    endLine = el;
    endColumn = ec;
  }

  public NodeToken getSpecialAt(final int i) {
    if (specialTokens == null)
      throw new NoSuchElementException("No specialTokens in token");
    return specialTokens.get(i);
  }

  public int numSpecials() {
    if (specialTokens == null)
      return 0;
    return specialTokens.size();
  }

  public void addSpecial(final NodeToken s) {
    if (specialTokens == null)
      specialTokens = new ArrayList<NodeToken>();
    specialTokens.add(s);
  }

  public void trimSpecials() {
    if (specialTokens == null)
      return;
    specialTokens.trimToSize();
  }

  @Override
  public String toString() {
    return tokenImage;
  }

  public String getSpecials(final String spc) {
    if (specialTokens == null)
      return "";
    StringBuilder buf = new StringBuilder(64);
    for (final Iterator<NodeToken> e = specialTokens.iterator(); e.hasNext();) {
      final String s = e.next().tokenImage;
      final int p = s.length() - 1;
      final char c = s.charAt(p);
      buf.append(s);
      // TODO modifier specials pour inclure fins de ligne
      if (c == '\n' || c == '\r')
        buf.append(spc);
      else
        buf.append(LS).append(spc);
    }
    return buf.toString();
  }

  public String withSpecials(final String spc) {
    final String specials = getSpecials(spc);
    final int len = specials.length();
    if (len == 0)
      return tokenImage;
    StringBuilder buf = new StringBuilder(len + tokenImage.length());
    buf.append(specials).append(tokenImage);
    return buf.toString();
  }

  public <R, A> R accept(final IRetArguVisitor<R, A> vis, final A argu) {
    return vis.visit(this, argu);
  }

  public <R> R accept(final IRetVisitor<R> vis) {
    return vis.visit(this);
  }

  public <A> void accept(final IVoidArguVisitor<A> vis, final A argu) {
    vis.visit(this, argu);
  }

  public void accept(final IVoidVisitor vis) {
    vis.visit(this);
  }

}

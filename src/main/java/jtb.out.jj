/* Generated by JTB 1.4.4 */


options
{
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniJavaParser)
import syntaxtree.*;


public class MiniJavaParser {}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}

PARSER_END(MiniJavaParser)

TOKEN :
{
  < INT : "int" >
| < VOID : "void" >
| < BOOLEAN : "boolean" >
| < FALSE : "false" >
| < TRUE : "true" >
| < STRING : "String" >
| < IF : "if" >
| < ELSE : "else" >
| < MAIN : "main" >
| < THIS : "this" >
| < NEW : "new" >
| < WHILE : "while" >
| < PUBLIC : "public" >
| < CLASS : "class" >
| < STATIC : "static" >
| < LENGTH : "length" >
| < RETURN : "return" >
| < EXTENDS : "extends" >
| < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < EQUAL : "=" >
| < DOT : "." >
| < PRINTLN : "System.out.println" >
| < AND : "&&" >
| < LESS : "<" >
| < PLUS : "+" >
| < MINUS : "-" >
| < TIMES : "*" >
| < NOT : "!" >
| < #DIGIT : ["0"-"9"] >
| < #LETTER : ["A"-"Z"]| ["a"-"z"] >
| < IDENTIFIER : <LETTER> ( <LETTER>| <DIGIT>| "_" )* >
| < INTEGER_LITERAL : ( <DIGIT> )+ >
}

SKIP :
{
  < "//" ( <DIGIT>| <LETTER>| " " )* ( "\n"| "\r"| "\r\n" ) >
| < "/*" ( <DIGIT>| <LETTER>| ( " "| "\n"| "\r"| "\r\n" ) )* "*/" >
| " "
| "\t"
| "\n"
}

// The following is a simple grammar that will allow you
// to test the generated lexer.
/*
void Goal() :
{}
{
  ( MiniJavaToken() )*
  <EOF>
}

void MiniJavaToken():
{}
{
  "{" | "public" | "static" | "void" |
  "main" | "(" | "String"  | "[" | "]" | ")" | "}" | "extends" | ";"
  | "return" | "," | "int" | "boolean" | "=" | "if" | "else" | "while"
  | "System.out.println" | "&&" | "<" | "+" | "-" | "*" | "." |
  "length" | <INTEGER_LITERAL> | "true" | "false" | "this" | "new" |
  "!"
}
*/
//adding parser
Program Program() :
{
  // --- JTB generated node declarations ---
  MainClass n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  TypeDeclaration n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n0 = MainClass()
  (
    n2 = TypeDeclaration()
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  n4 = < EOF > {
    n4.beginColumn++;
    n4.endColumn++;
    { n3 = JTBToolkit.makeNodeToken(n4); }
  }
  { return new Program(n0, n1, n3); }
}

//rule for main class
MainClass MainClass() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  NodeListOptional n28 = new NodeListOptional();
  VarDecl n29 = null;
  NodeListOptional n30 = new NodeListOptional();
  Statement n31 = null;
  NodeToken n32 = null;
  Token n33 = null;
  NodeToken n34 = null;
  Token n35 = null;
}
{
  n1 = < CLASS >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < IDENTIFIER >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < LBRACE >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = < PUBLIC >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  n9 = < STATIC >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  n11 = < VOID >
  { n10 = JTBToolkit.makeNodeToken(n11); }
  n13 = < MAIN >
  { n12 = JTBToolkit.makeNodeToken(n13); }
  n15 = < LPAREN >
  { n14 = JTBToolkit.makeNodeToken(n15); }
  n17 = < STRING >
  { n16 = JTBToolkit.makeNodeToken(n17); }
  n19 = < LBRACKET >
  { n18 = JTBToolkit.makeNodeToken(n19); }
  n21 = < RBRACKET >
  { n20 = JTBToolkit.makeNodeToken(n21); }
  n23 = < IDENTIFIER >
  { n22 = JTBToolkit.makeNodeToken(n23); }
  n25 = < RPAREN >
  { n24 = JTBToolkit.makeNodeToken(n25); }
  n27 = < LBRACE >
  { n26 = JTBToolkit.makeNodeToken(n27); }
  (
    LOOKAHEAD( 2 )
    n29 = VarDecl()
    { n28.addNode(n29); }
  )*
  { n28.nodes.trimToSize(); }
  (
    n31 = Statement()
    { n30.addNode(n31); }
  )*
  { n30.nodes.trimToSize(); }
  n33 = < RBRACE >
  { n32 = JTBToolkit.makeNodeToken(n33); }
  n35 = < RBRACE >
  { n34 = JTBToolkit.makeNodeToken(n35); }
  { return new MainClass(n0, n2, n4, n6, n8, n10, n12, n14, n16, n18, n20, n22, n24, n26, n28, n30, n32, n34); }
}

TypeDeclaration TypeDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  ClassDecl n1 = null;
  ClassExtendsDeclaration n2 = null;
}
{
  (
    LOOKAHEAD( 3 )
    n1 = ClassDecl()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n2 = ClassExtendsDeclaration()
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new TypeDeclaration(n0); }
}

//rule for class other than main
ClassDecl ClassDecl() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeListOptional n6 = new NodeListOptional();
  VarDecl n7 = null;
  NodeListOptional n8 = new NodeListOptional();
  MethodDecl n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
}
{
  n1 = < CLASS >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < IDENTIFIER >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < LBRACE >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  (
    n7 = VarDecl()
    { n6.addNode(n7); }
  )*
  { n6.nodes.trimToSize(); }
  (
    n9 = MethodDecl()
    { n8.addNode(n9); }
  )*
  { n8.nodes.trimToSize(); }
  n11 = < RBRACE >
  { n10 = JTBToolkit.makeNodeToken(n11); }
  { return new ClassDecl(n0, n2, n4, n6, n8, n10); }
}

ClassExtendsDeclaration ClassExtendsDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeListOptional n10 = new NodeListOptional();
  VarDecl n11 = null;
  NodeListOptional n12 = new NodeListOptional();
  MethodDecl n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
}
{
  n1 = < CLASS >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < IDENTIFIER >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < EXTENDS >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = < IDENTIFIER >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  n9 = < LBRACE >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  (
    n11 = VarDecl()
    { n10.addNode(n11); }
  )*
  { n10.nodes.trimToSize(); }
  (
    n13 = MethodDecl()
    { n12.addNode(n13); }
  )*
  { n12.nodes.trimToSize(); }
  n15 = < RBRACE >
  { n14 = JTBToolkit.makeNodeToken(n15); }
  { return new ClassExtendsDeclaration(n0, n2, n4, n6, n8, n10, n12, n14); }
}

VarDecl VarDecl() :
{
  // --- JTB generated node declarations ---
  Type n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n0 = Type()
  n2 = < IDENTIFIER >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n4 = < SEMICOLON >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new VarDecl(n0, n1, n3); }
}

MethodDecl MethodDecl() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Type n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeOptional n7 = new NodeOptional();
  FormalList n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeListOptional n13 = new NodeListOptional();
  VarDecl n14 = null;
  NodeListOptional n15 = new NodeListOptional();
  Statement n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  Exp n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
}
{
  n1 = < PUBLIC >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Type()
  n4 = < IDENTIFIER >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n6 = < LPAREN >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  (
    n8 = FormalList()
    { n7.addNode(n8); }
  )?
  n10 = < RPAREN >
  { n9 = JTBToolkit.makeNodeToken(n10); }
  n12 = < LBRACE >
  { n11 = JTBToolkit.makeNodeToken(n12); }
  (
    LOOKAHEAD( 2 )
    n14 = VarDecl()
    { n13.addNode(n14); }
  )*
  { n13.nodes.trimToSize(); }
  (
    n16 = Statement()
    { n15.addNode(n16); }
  )*
  { n15.nodes.trimToSize(); }
  n18 = < RETURN >
  { n17 = JTBToolkit.makeNodeToken(n18); }
  n19 = Exp()
  n21 = < SEMICOLON >
  { n20 = JTBToolkit.makeNodeToken(n21); }
  n23 = < RBRACE >
  { n22 = JTBToolkit.makeNodeToken(n23); }
  { return new MethodDecl(n0, n2, n3, n5, n7, n9, n11, n13, n15, n17, n19, n20, n22); }
}

FormalList FormalList() :
{
  // --- JTB generated node declarations ---
  FormalParameter n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  FormalRest n2 = null;
}
{
  n0 = FormalParameter()
  (
    n2 = FormalRest()
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new FormalList(n0, n1); }
}

FormalParameter FormalParameter() :
{
  // --- JTB generated node declarations ---
  Type n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
}
{
  n0 = Type()
  n2 = < IDENTIFIER >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  { return new FormalParameter(n0, n1); }
}

FormalRest FormalRest() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  FormalParameter n2 = null;
}
{
  n1 = < COMMA >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = FormalParameter()
  { return new FormalRest(n0, n2); }
}

Type Type() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  ArrayType n1 = null;
  BooleanType n2 = null;
  IntegerType n3 = null;
  Identifier n4 = null;
}
{
  (
    LOOKAHEAD( 2 )
    n1 = ArrayType()
    { n0 = new NodeChoice(n1, 0, 4); }
  |
    n2 = BooleanType()
    { n0 = new NodeChoice(n2, 1, 4); }
  |
    n3 = IntegerType()
    { n0 = new NodeChoice(n3, 2, 4); }
  |
    n4 = Identifier()
    { n0 = new NodeChoice(n4, 3, 4); }
  )
  { return new Type(n0); }
}

ArrayType ArrayType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n1 = < INT >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LBRACKET >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < RBRACKET >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new ArrayType(n0, n2, n4); }
}

BooleanType BooleanType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < BOOLEAN >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new BooleanType(n0); }
}

IntegerType IntegerType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < INT >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new IntegerType(n0); }
}

Statement Statement() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Block n1 = null;
  AssignmentStatement n2 = null;
  ArrayAssignmentStatement n3 = null;
  IfStatement n4 = null;
  WhileStatement n5 = null;
  PrintStatement n6 = null;
}
{
  (
    n1 = Block()
    { n0 = new NodeChoice(n1, 0, 6); }
  |
    LOOKAHEAD( 2 )
    n2 = AssignmentStatement()
    { n0 = new NodeChoice(n2, 1, 6); }
  |
    n3 = ArrayAssignmentStatement()
    { n0 = new NodeChoice(n3, 2, 6); }
  |
    n4 = IfStatement()
    { n0 = new NodeChoice(n4, 3, 6); }
  |
    n5 = WhileStatement()
    { n0 = new NodeChoice(n5, 4, 6); }
  |
    n6 = PrintStatement()
    { n0 = new NodeChoice(n6, 5, 6); }
  )
  { return new Statement(n0); }
}

Block Block() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  Statement n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n1 = < LBRACE >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    n3 = Statement()
    { n2.addNode(n3); }
  )*
  { n2.nodes.trimToSize(); }
  n5 = < RBRACE >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new Block(n0, n2, n4); }
}

AssignmentStatement AssignmentStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Exp n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < EQUAL >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Exp()
  n6 = < SEMICOLON >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  { return new AssignmentStatement(n0, n2, n4, n5); }
}

ArrayAssignmentStatement ArrayAssignmentStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Exp n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  Exp n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LBRACKET >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Exp()
  n6 = < RBRACKET >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n8 = < EQUAL >
  { n7 = JTBToolkit.makeNodeToken(n8); }
  n9 = Exp()
  n11 = < SEMICOLON >
  { n10 = JTBToolkit.makeNodeToken(n11); }
  { return new ArrayAssignmentStatement(n0, n2, n4, n5, n7, n9, n10); }
}

IfStatement IfStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Exp n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Statement n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  Statement n10 = null;
}
{
  n1 = < IF >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LPAREN >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Exp()
  n6 = < RPAREN >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = Statement()
  n9 = < ELSE >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  n10 = Statement()
  { return new IfStatement(n0, n2, n4, n5, n7, n8, n10); }
}

WhileStatement WhileStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Exp n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Statement n7 = null;
}
{
  n1 = < WHILE >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LPAREN >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Exp()
  n6 = < RPAREN >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = Statement()
  { return new WhileStatement(n0, n2, n4, n5, n7); }
}

PrintStatement PrintStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Exp n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = < PRINTLN >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LPAREN >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Exp()
  n6 = < RPAREN >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n8 = < SEMICOLON >
  { n7 = JTBToolkit.makeNodeToken(n8); }
  { return new PrintStatement(n0, n2, n4, n5, n7); }
}

//Expression
Exp Exp() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  AndExpression n1 = null;
  CompareExpression n2 = null;
  PlusExpression n3 = null;
  MinusExpression n4 = null;
  TimesExpression n5 = null;
  ArrayLookup n6 = null;
  ArrayLength n7 = null;
  MessageSend n8 = null;
  PrimaryExpression n9 = null;
}
{
  (
    LOOKAHEAD( 3 )
    n1 = AndExpression()
    { n0 = new NodeChoice(n1, 0, 9); }
  |
    LOOKAHEAD( 3 )
    n2 = CompareExpression()
    { n0 = new NodeChoice(n2, 1, 9); }
  |
    LOOKAHEAD( 3 )
    n3 = PlusExpression()
    { n0 = new NodeChoice(n3, 2, 9); }
  |
    LOOKAHEAD( 3 )
    n4 = MinusExpression()
    { n0 = new NodeChoice(n4, 3, 9); }
  |
    LOOKAHEAD( 3 )
    n5 = TimesExpression()
    { n0 = new NodeChoice(n5, 4, 9); }
  |
    LOOKAHEAD( 3 )
    n6 = ArrayLookup()
    { n0 = new NodeChoice(n6, 5, 9); }
  |
    LOOKAHEAD( 3 )
    n7 = ArrayLength()
    { n0 = new NodeChoice(n7, 6, 9); }
  |
    LOOKAHEAD( 3 )
    n8 = MessageSend()
    { n0 = new NodeChoice(n8, 7, 9); }
  |
    n9 = PrimaryExpression()
    { n0 = new NodeChoice(n9, 8, 9); }
  )
  { return new Exp(n0); }
}

AndExpression AndExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  PrimaryExpression n3 = null;
}
{
  n0 = PrimaryExpression()
  n2 = < AND >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = PrimaryExpression()
  { return new AndExpression(n0, n1, n3); }
}

CompareExpression CompareExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  PrimaryExpression n3 = null;
}
{
  n0 = PrimaryExpression()
  n2 = < LESS >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = PrimaryExpression()
  { return new CompareExpression(n0, n1, n3); }
}

PlusExpression PlusExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  PrimaryExpression n3 = null;
}
{
  n0 = PrimaryExpression()
  n2 = < PLUS >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = PrimaryExpression()
  { return new PlusExpression(n0, n1, n3); }
}

MinusExpression MinusExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  PrimaryExpression n3 = null;
}
{
  n0 = PrimaryExpression()
  n2 = < MINUS >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = PrimaryExpression()
  { return new MinusExpression(n0, n1, n3); }
}

TimesExpression TimesExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  PrimaryExpression n3 = null;
}
{
  n0 = PrimaryExpression()
  n2 = < TIMES >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = PrimaryExpression()
  { return new TimesExpression(n0, n1, n3); }
}

ArrayLookup ArrayLookup() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Exp n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n0 = PrimaryExpression()
  n2 = < LBRACKET >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = Exp()
  n5 = < RBRACKET >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new ArrayLookup(n0, n1, n3, n4); }
}

ArrayLength ArrayLength() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n0 = PrimaryExpression()
  n2 = < DOT >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n4 = < LENGTH >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new ArrayLength(n0, n1, n3); }
}

MessageSend MessageSend() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeOptional n7 = new NodeOptional();
  ExpList n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
}
{
  n0 = PrimaryExpression()
  n2 = < DOT >
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n4 = < IDENTIFIER >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n6 = < LPAREN >
  { n5 = JTBToolkit.makeNodeToken(n6); }
  (
    n8 = ExpList()
    { n7.addNode(n8); }
  )?
  n10 = < RPAREN >
  { n9 = JTBToolkit.makeNodeToken(n10); }
  { return new MessageSend(n0, n1, n3, n5, n7, n9); }
}

ExpList ExpList() :
{
  // --- JTB generated node declarations ---
  Exp n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  ExpRest n2 = null;
}
{
  n0 = Exp()
  (
    n2 = ExpRest()
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new ExpList(n0, n1); }
}

ExpRest ExpRest() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Exp n2 = null;
}
{
  n1 = ","
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Exp()
  { return new ExpRest(n0, n2); }
}

PrimaryExpression PrimaryExpression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  IntegerLiteral n1 = null;
  TrueLiteral n2 = null;
  FalseLiteral n3 = null;
  Identifier n4 = null;
  ThisExpression n5 = null;
  ArrayAllocationExpression n6 = null;
  AllocationExpression n7 = null;
  NotExpression n8 = null;
  BracketExpression n9 = null;
}
{
  (
    n1 = IntegerLiteral()
    { n0 = new NodeChoice(n1, 0, 9); }
  |
    n2 = TrueLiteral()
    { n0 = new NodeChoice(n2, 1, 9); }
  |
    n3 = FalseLiteral()
    { n0 = new NodeChoice(n3, 2, 9); }
  |
    n4 = Identifier()
    { n0 = new NodeChoice(n4, 3, 9); }
  |
    n5 = ThisExpression()
    { n0 = new NodeChoice(n5, 4, 9); }
  |
    LOOKAHEAD( 2 )
    n6 = ArrayAllocationExpression()
    { n0 = new NodeChoice(n6, 5, 9); }
  |
    n7 = AllocationExpression()
    { n0 = new NodeChoice(n7, 6, 9); }
  |
    n8 = NotExpression()
    { n0 = new NodeChoice(n8, 7, 9); }
  |
    n9 = BracketExpression()
    { n0 = new NodeChoice(n9, 8, 9); }
  )
  { return new PrimaryExpression(n0); }
}

IntegerLiteral IntegerLiteral() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < INTEGER_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new IntegerLiteral(n0); }
}

TrueLiteral TrueLiteral() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < TRUE >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new TrueLiteral(n0); }
}

FalseLiteral FalseLiteral() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < FALSE >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new FalseLiteral(n0); }
}

Identifier Identifier() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new Identifier(n0); }
}

ThisExpression ThisExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < THIS >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new ThisExpression(n0); }
}

ArrayAllocationExpression ArrayAllocationExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Exp n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = < NEW >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < INT >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < LBRACKET >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n6 = Exp()
  n8 = < RBRACKET >
  { n7 = JTBToolkit.makeNodeToken(n8); }
  { return new ArrayAllocationExpression(n0, n2, n4, n6, n7); }
}

AllocationExpression AllocationExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = < NEW >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < IDENTIFIER >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < LPAREN >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = < RPAREN >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new AllocationExpression(n0, n2, n4, n6); }
}

NotExpression NotExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Exp n2 = null;
}
{
  n1 = < NOT >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Exp()
  { return new NotExpression(n0, n2); }
}

BracketExpression BracketExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Exp n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = < LPAREN >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Exp()
  n4 = < RPAREN >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new BracketExpression(n0, n2, n3); }
}
